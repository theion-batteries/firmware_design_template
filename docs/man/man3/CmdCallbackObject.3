.TH "CmdCallbackObject" 3 "Fri May 27 2022" "Version 0.2" "Firmware Design Template" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CmdCallbackObject
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CmdCallback\&.hpp>\fP
.PP
Inherited by \fB_CmdCallback< STORESIZE, CmdParserString >\fP, and \fB_CmdCallback< STORESIZE, T >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "Thread * \fBgetInternalThread\fP () const"
.br
.ti -1c
.RI "ThreadController * \fBgetInternalScheduler\fP () const"
.br
.ti -1c
.RI "void \fBcreateThreadForCmd\fP (\fBCmdParser\fP *cmdParser)"
.br
.ti -1c
.RI "void \fBprocessCmdVoid\fP (\fBCmdParser\fP *cmdParser)"
.br
.ti -1c
.RI "void * \fBthreadCallback\fP (size_t idx, \fBCmdParser\fP *cmdParser)"
.br
.RI "internal thread callback "
.ti -1c
.RI "void \fBloopCmdProcessing\fP (\fBCmdParser\fP *cmdParser, \fBCmdBufferObject\fP *cmdBuffer, Stream *serial)"
.br
.ti -1c
.RI "virtual bool \fBprocessCmd\fP (\fBCmdParser\fP *cmdParser)"
.br
.ti -1c
.RI "bool \fBrunCmd\fP (char *cmdStr, \fBCmdParser\fP *cmdParser)"
.br
.ti -1c
.RI "void \fBupdateCmdProcessing\fP (\fBCmdParser\fP *cmdParser, \fBCmdBufferObject\fP *cmdBuffer, Stream *serial)"
.br
.ti -1c
.RI "virtual bool \fBhasCmd\fP (char *cmdStr)"
.br
.ti -1c
.RI "virtual size_t \fBgetStoreSize\fP ()=0"
.br
.ti -1c
.RI "virtual bool \fBcheckStorePos\fP (size_t idx)=0"
.br
.ti -1c
.RI "virtual bool \fBequalStoreCmd\fP (size_t idx, char *cmdStr)=0"
.br
.ti -1c
.RI "virtual bool \fBcallStoreFunct\fP (size_t idx, \fBCmdParser\fP *cmdParser)=0"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "size_t \fBcurrent_idx\fP"
.br
.ti -1c
.RI "bool \fBCmdreadyForExecution\fP = false"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB27\fP of file \fBCmdCallback\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual bool CmdCallbackObject::callStoreFunct (size_t idx, \fBCmdParser\fP * cmdParser)\fC [pure virtual]\fP"
Call function from store\&. Please check idx with 
.PP
\fBSee also\fP
.RS 4
\fBcheckStorePos\fP befor you use this funct!
.RE
.PP
\fBParameters\fP
.RS 4
\fIidx\fP Store number 
.RE
.PP
\fBReturns\fP
.RS 4
TRUE if function is valid and calling 
.RE
.PP

.PP
Implemented in \fB_CmdCallback< STORESIZE, T >\fP, and \fB_CmdCallback< STORESIZE, CmdParserString >\fP\&.
.SS "virtual bool CmdCallbackObject::checkStorePos (size_t idx)\fC [pure virtual]\fP"
Check is on store idx a valide cmd string and function\&.
.PP
\fBParameters\fP
.RS 4
\fIidx\fP Store number 
.RE
.PP
\fBReturns\fP
.RS 4
TRUE if valid or FALSE 
.RE
.PP

.PP
Implemented in \fB_CmdCallback< STORESIZE, T >\fP, and \fB_CmdCallback< STORESIZE, CmdParserString >\fP\&.
.SS "void CmdCallbackObject::createThreadForCmd (\fBCmdParser\fP * cmdParser)"

.PP
Definition at line \fB15\fP of file \fBCmdCallback\&.cpp\fP\&.
.SS "virtual bool CmdCallbackObject::equalStoreCmd (size_t idx, char * cmdStr)\fC [pure virtual]\fP"
Check if the cmd string equal to cmd in store\&. Please check idx with 
.PP
\fBSee also\fP
.RS 4
\fBcheckStorePos\fP befor you use this funct!
.RE
.PP
\fBParameters\fP
.RS 4
\fIidx\fP Store number 
.br
\fIcmdStr\fP Cmd string to search 
.RE
.PP
\fBReturns\fP
.RS 4
TRUE is equal 
.RE
.PP

.SS "ThreadController * CmdCallbackObject::getInternalScheduler () const"

.PP
Definition at line \fB11\fP of file \fBCmdCallback\&.cpp\fP\&.
.SS "Thread * CmdCallbackObject::getInternalThread () const"

.PP
Definition at line \fB8\fP of file \fBCmdCallback\&.cpp\fP\&.
.SS "virtual size_t CmdCallbackObject::getStoreSize ()\fC [pure virtual]\fP"
Give the size of callback store\&.
.PP
\fBReturns\fP
.RS 4
Size of callback Store 
.RE
.PP

.PP
Implemented in \fB_CmdCallback< STORESIZE, T >\fP, and \fB_CmdCallback< STORESIZE, CmdParserString >\fP\&.
.SS "bool CmdCallbackObject::hasCmd (char * cmdStr)\fC [virtual]\fP"
Search command in the buffer\&.
.PP
\fBParameters\fP
.RS 4
\fIcmdStr\fP Cmd string to search 
.RE
.PP
\fBReturns\fP
.RS 4
TRUE if found the command in the buffer 
.RE
.PP

.PP
Definition at line \fB122\fP of file \fBCmdCallback\&.cpp\fP\&.
.SS "void CmdCallbackObject::loopCmdProcessing (\fBCmdParser\fP * cmdParser, \fBCmdBufferObject\fP * cmdBuffer, Stream * serial)"
Endless loop for process incoming data from serial\&.
.PP
\fBParameters\fP
.RS 4
\fIcmdParser\fP Parser object with options set 
.br
\fIcmdBuffer\fP Buffer object for data handling 
.br
\fIserial\fP Arduino serial interface from comming data 
.RE
.PP

.PP
Definition at line \fB27\fP of file \fBCmdCallback\&.cpp\fP\&.
.SS "bool CmdCallbackObject::processCmd (\fBCmdParser\fP * cmdParser)\fC [virtual]\fP"
Search command in the buffer and execute the callback function\&.
.PP
\fBParameters\fP
.RS 4
\fIcmdStr\fP Cmd string to search 
.RE
.PP
\fBReturns\fP
.RS 4
TRUE if found the command in the buffer 
.RE
.PP

.PP
Definition at line \fB44\fP of file \fBCmdCallback\&.cpp\fP\&.
.SS "void CmdCallbackObject::processCmdVoid (\fBCmdParser\fP * cmdParser)"

.PP
Definition at line \fB65\fP of file \fBCmdCallback\&.cpp\fP\&.
.SS "bool CmdCallbackObject::runCmd (char * cmdStr, \fBCmdParser\fP * cmdParser)"

.PP
Definition at line \fB86\fP of file \fBCmdCallback\&.cpp\fP\&.
.SS "void * CmdCallbackObject::threadCallback (size_t idx, \fBCmdParser\fP * cmdParser)"

.PP
internal thread callback 
.PP
\fBParameters\fP
.RS 4
\fIcmdParser\fP 
.br
\fI\fBCmdBuffer\fP\fP 
.RE
.PP
\fBReturns\fP
.RS 4
void* 
.RE
.PP

.PP
Definition at line \fB21\fP of file \fBCmdCallback\&.cpp\fP\&.
.SS "void CmdCallbackObject::updateCmdProcessing (\fBCmdParser\fP * cmdParser, \fBCmdBufferObject\fP * cmdBuffer, Stream * serial)"
Check for single new char on serial and if it was the endChar
.PP
\fBParameters\fP
.RS 4
\fIcmdParser\fP Parser object with options set 
.br
\fIcmdBuffer\fP Buffer object for data handling 
.br
\fIserial\fP Arduino serial interface from comming data 
.RE
.PP

.PP
Definition at line \fB105\fP of file \fBCmdCallback\&.cpp\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "bool CmdCallbackObject::CmdreadyForExecution = false"

.PP
Definition at line \fB36\fP of file \fBCmdCallback\&.hpp\fP\&.
.SS "size_t CmdCallbackObject::current_idx"

.PP
Definition at line \fB35\fP of file \fBCmdCallback\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Firmware Design Template from the source code\&.
